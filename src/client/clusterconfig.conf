akka {
  loglevel = "INFO"
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  #stdout-loglevel = "DEBUG"
  #Enable remote actor, change the provider from local to remote
  actor {
    # provider = "akka.remote.RemoteActorRefProvider"
    # provider = "akka.actor.LocalActorRefProvider"
    provider = "akka.cluster.ClusterActorRefProvider"
    default-dispatcher {
      # Throughput for default Dispatcher, set to 1 for as fair as possible
      throughput = 100
    }
    default-mailbox {
      mailbox-capacity = 10000
    }
//    serializers {
//       msgpack = "com.tiantian.stranger.akka.serialzers.MsgpackSerialzer"
//    }
//    serialization-bindings {
//      "com.tiantian.stranger.akka.event.Event" = msgpack
//    }
  }

  # the machine you want to run the actor system on; this host name is exactly what is passed to remote systems in order to identify this
  # system and consequently used for connecting back to this system if need be, hence set it to a reachable IP
  # address or resolvable name in case you want to communicate across the network.
  remote {
    netty.tcp {
      hostname = "127.0.0.1"
      port = 0
    }
  }

}
akka.extensions = ["akka.cluster.client.ClusterClientReceptionist"]

akka.cluster.client.receptionist {
  # Actor name of the ClusterReceptionist actor, /system/receptionist
  name = receptionist
  # Start the receptionist on members tagged with this role.
  # All members are used if undefined or empty.
  role = ""
  # The receptionist will send this number of contact points to the client
  number-of-contacts = 3
  # The actor that tunnel response messages to the client will be stopped
  # after this time of inactivity.
  response-tunnel-receive-timeout = 30s
  # The id of the dispatcher to use for ClusterReceptionist actors.
  # If not specified default dispatcher is used.
  # If specified you need to define the settings of the actual dispatcher.
  use-dispatcher = ""
}

# Settings for the ClusterClient
akka.cluster.client {
  # Actor paths of the ClusterReceptionist actors on the servers (cluster nodes)
  # that the client will try to contact initially. It is mandatory to specify
  # at least one initial contact.
  # Comma separated full actor paths defined by a string on the form of
  # "akka.tcp://system@hostname:port/system/receptionist"
  initial-contacts = ["akka.tcp://StrangerClusterActorSystem@127.0.0.1:2560/system/receptionist",
                      "akka.tcp://StrangerClusterActorSystem@127.0.0.1:2561/system/receptionist"]
  # Interval at which the client retries to establish contact with one of
  # ClusterReceptionist on the servers (cluster nodes)
  establishing-get-contacts-interval = 3s
  # Interval at which the client will ask the ClusterReceptionist for
  # new contact points to be used for next reconnect.
  refresh-contacts-interval = 60s
  # How often failure detection heartbeat messages should be sent
  heartbeat-interval = 2s
  # Number of potentially lost/delayed heartbeats that will be
  # accepted before considering it to be an anomaly.
  # The ClusterClient is using the akka.remote.DeadlineFailureDetector, which
  # will trigger if there are no heartbeats within the duration
  # heartbeat-interval + acceptable-heartbeat-pause, i.e. 15 seconds with
  # the default settings.
  acceptable-heartbeat-pause = 13s
  # If connection to the receptionist is not established the client will buffer
  # this number of messages and deliver them the connection is established.
  # When the buffer is full old messages will be dropped when new messages are sent
  # via the client. Use 0 to disable buffering, i.e. messages will be dropped
  # immediately if the location of the singleton is unknown.
  # Maximum allowed buffer size is 10000.
  buffer-size = 1000
}